Stack Used by AADHAR servers -
	RabbitMQ
	Mule
	Hadoop
	Hive
	Pentaho
	Tomcat
	MongoDB
	Solr
	MySQL

1. They used to provide or maybe do provide a PoC stage demo API which is currently inaccessible due to security reasons.

2. Types of API -
	1. Aadhaar Authentication - return YES / NO based on the information provided by Customer
	2. Aadhaar eKYC - returns user information.

* Aadhar Authentication API *

3. Abbreviations -
	AUA = Authentication User Agency ( the agency using aadhaar service )
	Sub-AUA = SA

	e.g. VRAHAD = ASA
		HCenters = AUA

	ASA = Authentication Service Agency (AUA = ASA if capable)


4. URL format -
	https: // <host>/<api_ver>/<ac>/<uid[0]>/<uid[1]>/<asalk>

	ac = a code for AUA e.g. it could be VRAHAD for us assigned by UIDAI
	uid[0] and uid[1] = first two digits of AADHAR number used for load balancing

	asalk = ASA licensing key

	example URL would be -

	https://192.168.0.13/1.6/TEST_CENTER/9/0/ASALK_TEST_KEY

5. It uses XML for Input Data Format instead of JSON

6. Request Format -

	<Auth uid=”” tid=”” ac=”” sa=”” ver=”” txn=”” lk=””>
		<Uses pi=”” pa=”” pfa=”” bio=”” bt=”” pin=”” otp=””/>
		<Tkn type=”” value=””/>
		<Meta udc=”” fdc=”” idc=”” pip=”” lot=”G|P” lov=””/>
		<Skey ci=”” ki=””>encrypted and encoded session key</Skey>
		<Data type=”X|P”>encrypted PID block</Data>
		<Hmac>SHA-256 Hash of Pid block, encrypted and then encoded</Hmac>
		<Signature>Digital signature of AUA</Signature>
	</Auth>

	PID Block -

	<Pid ts=”” ver=””> “YYYY-MM-DDThh:mm:ss”
		<Demo lang=””>
		<Pi ms=”E|P” mv=”” name=”” lname=”” lmv=”” gender=”M|F|T” dob=””
		dobt=”V|D|A” age=”” phone=”” email=””/>
		<Pa ms=”E” co=”” house=”” street=”” lm=”” loc=””
		vtc=”” subdist=”” dist=”” state=”” pc=”” po=””/>
		<Pfa ms=”E|P” mv=”” av=”” lav=”” lmv=””/>
		</Demo>
		<Bios>
		<Bio type=”FMR|FIR|IIR” posh=””>encoded biometric</Bio>
		</Bios>
		<Pv otp=”” pin=””/>
	</Pid>

	Data block uses this block's information.

	7. All of the encryptions and hashes are transferd as base64.

	8. PID block can also be in Protocol Buffer format to save some bytes on data.

	9. Attributes info - (* means attribute is mandatory)

	Auth -
		1. *uid = Aadhar number
		2. *tid = deviceID ( registered devices can get it using getTID())
		3. *ac = same as before
		4. *sa = a code given by AUA to SAs. It can be HealthCenterID ( #See KeyDB Schema )
		5. *ver = api version
		6. *txn = transaction ID by AUA (max_len =50 [a-zA-Z0-9.-/\}:])
			(returned as it is in response, can be used as a request ID)
		7. *lk = license key assigned to AUA (It's basically just a JWT with Expiry 64 character i.e. sha256 hash probably)

	Uses - (Authentication factors used by request)
	 	1. *pi = y/n (If y then Pi part of demo element should be used in auth)
		2. *pa = y/n (If y then Pa part of demo element should be used in auth)
		3. *pfa = y/n (If y then Pfa part of demo element should be used in auth)
		4. *bio = y/n (If y then Bio part of Bios element used in auth)
		5. ~bt = y/n (Comma Seperated List for Biometrics used e.g. FMR, FIR, IIR)
		   ~ = only if bio is set
		6. *pin = y/n (If y then use pin for auth)
		7. *otp = y/n (If y then use OTP for auth)

	Tkn - (Optinal Used for self service txn e.g. NFC token etc.)
		type - type of token ( 001 valid only)
				NFC support is awaited feature for future
		value - Token number - currently it must be a number without prefix of +91/0 etc.

	Meta - (Metadata of the device and transation)
		1. *udc = Unique Device Code (Max len = 20 [vendorcode][date-of-deployment][serial])
		2. *fdc = Fingerprint Device Code (Max len = 10)
			For non fingerprint auth use value NA. If device is certified get code
			from the vendor else use NC (Not certified yet).
		3. *idc = Iris Device Code (same as fdc but for Iris scanners)
		4. *pip = Public IP address of device (NA if not available)
		5. *lot = Location Type (G/P) (GEocoding in lat long else postal pin code)
		6. *lov = Location Value
			if lot == G:
				then add "lat,long,alt" of location using GPS (alt is optional)
				max_len = 39 (15,15,7)
			elif lot == P:
				postalpin code

	Skey - AES Session Key (256 bit key AES ECB PKCS7Padding) Which is
		   encrypted with 2048 bit public key given by UIDAI
		1. ci = Certificate Identifier - certificate expiration date "YYYYMMDD"
		2. ki = ?

	Data - PID in b64
		type = P for protobuff else X for XML

	Hmac -
		b64 - create PID XML or Protobuf byte array compute SHA256 of it with key = skey

	Signature -
		Signature should be on the name of the AUA/ASA

	Pid -
		1. *ts - timestamp at time of generation (ISO8601 IST)
		2. *ver = software version
	~Demo (Demographic data)-
		1. *lang  - Indian Language code (Hindi - 06)

	~Pi - Personal Identity
		1. ms (Matching Strategy) for Name attribute (Exact/ Partial) (E/P)
		2. mv (Matching Value) for name (max_val = 100)
		3. name - Max_len = 60
			Matching can be done in any sequence
			Ashish Shukla = Shukla Ashish
			. etc are ignored
			Dr. Ms. Mrs. Mr. ignored
			There should be additional words e.g. Ashish Kumar Shukla is invalid
		4. lname - Unicode string in Indian Language of name
		5. lmv - How much phonetically it should match to the name
		6. gender - M/F/T
		7. dob - YYYY-MM-DD else YYYY
		8. dobt - type of DOB (V/D/A) (verified/declared/approximate)
		9. age - in years
		10. phone
		11. email - case insensitive

	~Pa (Personal Address)
		1. ms - E/P
		2. mv - 1-100
		3. av - full address as a single string
				space seperated
				any sequence holds good
		4. lav - address in indian language
		5. lmv

	~ Bios (contains Bio sub tag )

	~ Bio
		1. *type = FIR, FMR, IIR
				Fingerprint Image Record
				Fingerprint Minutiae Record
				Iris Image Record
		2. *posh - Position
				UNKNOWN
				LEFT/RIGHT_+{IRIS
				INDEX
				LITTLE
				MIDDLE
				RING
				THUMB}
	~ Pv = Pin Value support for Pin and otp
		1. pin = for UIDAI usage only
		2. otp = Most recent OTP

7. Response Format -
	<AuthRes ret=”y|n” code=”” txn=”” err=”” ts=”” actn=”” info=””>
		<Signature xmlns="http://www.w3.org/2000/09/xmldsig#">
		<SignedInfo>
		<CanonicalizationMethod
		Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315" />
		<SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-
		sha256" />
		<Reference URI="">
		<Transforms>
		<Transform
		Algorithm="http://www.w3.org/2000/09/xmldsig#enveloped-
		signature" />
		</Transforms>
		<DigestMethod
		Algorithm="http://www.w3.org/2000/09/xmldsig#sha256"/>
		<DigestValue></DigestValue>
		</Reference>
		</SignedInfo>
		<SignatureValue></SignatureValue>
		</Signature>
	</AuthRes>

AuthRes

	1. ret- y/n
	2. code- Authentication response code max_len = 40
		if NA then retry
	3. txn- ASA specified txn id to track
	4. ts - timestamp when response was generated
	5. ~actn- max_len 5 May not exist. Used to indicate action to resident.
	6. info - meta authentication infromation maxlen = 128 characters

8. Using Synchronized Session Keys -

	1. Create AES Session Key
	2. Send Auth Request with this Key once
	3. For subsequent requests till 4 hours
	4. Generate a new Random Number (CSPRNG)
	5. Generate new AES Key using the seed AES Key and the random number
	6. Send auth request with the random number only
	7. If response is 504 then stick to step 1

* Aadhaar eKYC API *
AUA , ASA are called KUA, KSA here (KYC UA, KYC SA)

https://<host>/kyc/<ver>/<ac>/<uid[0]>/<uid[1]>/<asalk>

1. Request -
<Kyc ver="" ts="" ra="" rc="" mec="" lr="" de="" pfr="">
	<Rad>base64 encoded fully valid Auth XML for resident</Rad>
</Kyc>


Kyc -
	1. *ver- api version
	2. *ts- timsetamp at the time of capture of authentication input value must match with PID's ts
	3. ra- resident auth type (F,I,O,P) (Fingerprint, OTP) can be combination as well e.g. FO
	4. rc- Y resident's consent
	5. ~mec- explicit consent to access mobile and email by default API won't return these two
	6. ~lr- Y/N if local language data is required
	7. ~de- if KUA is giving permission to decrypt to KSA
	8. ~pfr- Y/N return print format i.e. e-Aadhaar.

Rad - contains b64 of Auth's XML
txn value must start with UKC for it except it all other things are same

We may or may not sign the Kyc XML

2. Response -
<Resp status="" ko="" ret="" code="" txn="" ts="" err="">encrypted and
base64 encoded KycRes element</Resp>

Decrypt it using KUA's private key

<KycRes ret="" code="" txn="" ts="" ttl="" actn="" err="">
	<Rar>base64 encoded fully valid Auth response XML for resident</Rar>
	<UidData uid="">
	<Poi name="" dob="" gender="" phone="" email=""/>
	<Poa co="" house="" street="" lm="" loc="" vtc=""
	subdist="" dist="" state="" country="" pc="" po=""/>
	<LData lang="" name="" co="" house="" street="" lm="" loc="" vtc=""
	subdist="" dist="" state="" country="" pc="" po=""/>
	<Pht>base64 encoded JPEG photo of the resident</Pht>
	<Prn type="pdf">base64 encoded signed Aadhaar letter for printing</Prn>
	</UidData>
	<Signature/>
</KycRes>

KycRes-
1. ret- Y/N
2. code- max_len = 40 (AUA must store this code corresponding to txn)
3. txn- txn code sent
4. ts- timestamp of response generation
5. ttl- time to live for demographic data
